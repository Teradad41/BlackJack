(()=>{"use strict";var e={913:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HOUSECARD=t.MAINFIELD=t.STARTPAGE=void 0,t.STARTPAGE=document.getElementById("startPage"),t.MAINFIELD=document.getElementById("mainPage"),t.HOUSECARD=document.getElementById("houseCardDiv")},603:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Controller=void 0;const s=n(693),r=n(47),i=n(766),a=n(217),o=n(487),l=n(913),d=n(594);t.Controller=class{static renderStartPage(){s.StartView.render()}static startBlackJack(e){const t=new d.Table(e.getGameType());t.setPlayers([e]),i.MainView.render(t);const n=null===l.MAINFIELD||void 0===l.MAINFIELD?void 0:l.MAINFIELD.querySelector("#houseCardDiv"),s=null===l.MAINFIELD||void 0===l.MAINFIELD?void 0:l.MAINFIELD.querySelector("#userCardDiv");t.blackjackAssignPlayerHands(),n.innerHTML+=r.CardView.renderCard(t.getHouse().getHand()[0]),n.innerHTML+=r.CardView.renderCard(t.getHouse().getHand()[1]);for(const e of t.getPlayers())s.innerHTML+=r.CardView.renderCard(t.getPlayers()[0].getHand()[0]),s.innerHTML+=r.CardView.renderCard(t.getPlayers()[0].getHand()[1]);a.BetView.render(t)}static actingPhase(e,t){o.ActionView.render(t),e.setGamePhase("acting"),setTimeout((()=>{r.CardView.rotateCards("houseCardDiv"),r.CardView.rotateCards("userCardDiv"),i.MainView.setScore(e)}),400)}}},863:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Card=void 0,t.Card=class{constructor(e,t){this.suit=e,this.rank=t}getSuit(){return this.suit}getRank(){return this.rank}getRankNumber(){return"A"===this.rank?11:"J"===this.rank||"Q"===this.rank||"K"===this.rank?10:parseInt(this.rank,10)}}},511:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Deck=void 0;const s=n(863);class r{constructor(e){this.gameType=e,this.deck=[],"blackjack"===this.gameType&&(this.deck=r.generateDeck())}static generateDeck(){const e=[],t=["H","D","C","S"],n=["A","2","3","4","5","6","7","8","9","10","J","Q","K"];for(const r of t)for(const t of n)e.push(new s.Card(r,t));return e}shuffle(){for(let e=this.deck.length-1;e>=0;e--){const t=Math.floor(Math.random()*(e+1));[this.deck[e],this.deck[t]]=[this.deck[t],this.deck[e]]}}resetDeck(){this.deck=r.generateDeck(),this.shuffle()}drawOne(){return this.deck.shift()}}t.Deck=r},37:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GameDecision=void 0,t.GameDecision=class{constructor(e,t){this.action=e,this.amount=t}getAction(){return this.action}getAmount(){return this.amount}setAction(e){this.action=e}setAmount(e){this.amount=e}}},430:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Player=void 0;const s=n(37);t.Player=class{constructor(e,t,n,s=400){this.name=e,this.type=t,this.gameType=n,this.chips=s,this.hand=[],this.bet=0,this.winAmount=0,this.gameStatus="betting"}getName(){return this.name}getGameStatus(){return this.gameStatus}getGameType(){return this.gameType}getChips(){return this.chips}getWinAmount(){return this.winAmount}getBet(){return this.bet}getHand(){return this.hand}setHand(e){this.hand=e}clearHand(){this.hand=[]}setBet(e){this.bet=e}clearBet(){this.bet=0}promptPlayer(e){return new s.GameDecision("hit",50)}getHandScore(){let e=0,t=0;for(const n of this.hand)e+=n.getRankNumber(),"A"===n.getRank()&&t++;for(;e>21&&t>0;)e-=10,t--;return e}}},594:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Table=void 0;const s=n(511),r=n(430);t.Table=class{constructor(e,t=[5,20,50,100]){this.gameType=e,this.betDenomination=t,this.gamePhase="betting",this.deck=new s.Deck(e),this.deck.shuffle(),this.turnCorner=0,this.resultsLog=[],this.players=[],this.house=new r.Player("house","house",this.gameType)}getPlayers(){return this.players}setPlayers(e){this.players=e}getHouse(){return this.house}getBetDenomation(){return this.betDenomination}getGamePhase(){return this.gamePhase}setGamePhase(e){this.gamePhase=e}evaluateMove(e){}blackjackEvaluateAndGetRoundResults(){return""}blackjackAssignPlayerHands(){for(const e of this.players){const t=this.checkNotUndefinedAndGetTwo();void 0!==t&&e.setHand(t)}const e=this.checkNotUndefinedAndGetTwo();void 0!==e&&this.house.setHand(e)}checkNotUndefinedAndGetTwo(){const e=this.deck.drawOne(),t=this.deck.drawOne();return void 0!==e&&void 0!==t?[e,t]:void 0}blackjackClearPlayerHandsAndBets(){for(const e of this.players)e.clearHand(),e.clearBet();this.house.clearHand(),this.house.clearBet()}getTurnPlayer(){return this.players[this.turnCorner%this.players.length]}haveTurn(e){"roundOver"!==this.gamePhase&&(this.getTurnPlayer().promptPlayer(1),this.turnCorner++)}onFirstPlayer(){return this.turnCorner%this.players.length==0}onLastPlayer(){return this.turnCorner%this.players.length==2}allPlayerActionsResolved(){return this.players.filter((e=>{const t=e.getGameStatus();return"broken"===t||"stand"===t||"bust"===t||"surrender"===t})).length===this.players.length}}},487:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ActionView=void 0,t.ActionView=class{static render(e){e.innerHTML="",e.innerHTML='\n        <div class="flex justify-around items-center pt-[3rem]">\n        <div id="surrenderBtn" class="flex flex-col items-center justify-center px-8">\n            <button class="bg-gradient-to-br from-red-500 to-red-800 circle-button rounded-full hover:opacity-80">\n                <i class="fas fa-flag fa-2xl"></i>\n            </button>\n            <div class="font-bold text-center pt-2">SURRENDER</div>\n        </div>\n        <div class="flex flex-col items-center justify-center px-8" id="standBtn">\n            <button class="bg-gradient-to-br from-green-600 to-green-800 circle-button rounded-full hover:opacity-80">\n                <i class="fas fa-hand fa-2xl"></i>\n            </button>\n            <div class="font-bold text-center pt-2">STAND</div>\n        </div>\n        <div class="flex flex-col items-center justify-center px-8" id="hitBtn">\n            <button class="bg-gradient-to-br from-yellow-300 to-yellow-500 circle-button rounded-full hover:opacity-80">\n                <i class="fa-solid fa-copy fa-2xl"></i>\n            </button>\n            <div class="font-bold text-center pt-2">HIT</div>\n        </div>\n        <div class="flex flex-col items-center justify-center px-8" id="doubleBtn">\n            <button class="bg-gradient-to-br from-blue-500 to-blue-800 circle-button rounded-full hover:opacity-70">\n                <i class="fas fa-coins fa-2xl"></i>\n            </button>\n            <div class="font-bold text-center pt-2">DOUBLE</div>\n        </div>\n        </div>\n        '}}},217:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BetView=void 0;const s=n(603),r=n(913);t.BetView=class{static render(e){var t,n;if(r.MAINFIELD){const i=r.MAINFIELD.querySelector("#betOrActionDiv");i.innerHTML="",i.innerHTML=`\n            <div class="flex flex-col justify-center items-center mt-7 px-7 py-4" style="box-shadow: 0px -8px 10px rgba(0, 228, 0), 0px 8px 10px rgba(0, 228, 0);">\n                <div class="flex justify-center">\n                    <p class="px-5 text-3xl pb-1">BET: <span id="userBetAmount" class="text-4xl">${e.getPlayers()[0].getBet().toString()}</span></p>\n                </div>\n                <div class="flex justify-around py-6">\n                    <div class="px-2">\n                        <div class="chip w-16 h-16 bg-red-500 rounded-full shadow-xl flex justify-center items-center cursor-pointer hover:opacity-80" data-chips="${e.getBetDenomation()[0].toString()}">\n                        <div class="w-12 h-12 bg-white rounded-full flex justify-center items-center">\n                            <p class="text-gray-800 text-lg font-bold pb-1">$${e.getBetDenomation()[0].toString()}</p>\n                        </div>\n                    </div>\n                </div>\n                <div class="px-2">\n                    <div class="chip w-16 h-16 bg-green-500 rounded-full shadow-xl flex justify-center items-center cursor-pointer hover:opacity-80" data-chips="${e.getBetDenomation()[1].toString()}">\n                        <div class="w-12 h-12 bg-white rounded-full flex justify-center items-center">\n                            <p class="text-gray-800 text-lg font-bold pb-1">$${e.getBetDenomation()[1].toString()}</p>\n                        </div>\n                    </div>\n                </div>\n                <div class="px-2">\n                    <div class="chip w-16 h-16 bg-blue-700 rounded-full shadow-xl flex justify-center items-center cursor-pointer hover:opacity-80" data-chips="${e.getBetDenomation()[2].toString()}">\n                        <div class="w-12 h-12 bg-white rounded-full flex justify-center items-center">\n                            <p class="text-gray-800 text-lg font-bold pb-1">$${e.getBetDenomation()[2].toString()}</p>\n                        </div>\n                    </div> \n                </div>\n                <div class="px-2">\n                    <div class="chip w-16 h-16 bg-gray-800 rounded-full shadow-xl flex justify-center items-center cursor-pointer hover:opacity-80" data-chips="${e.getBetDenomation()[3].toString()}">\n                        <div class="w-12 h-12 bg-white rounded-full flex justify-center items-center">\n                            <p class="text-gray-800 text-lg font-bold pb-1">$${e.getBetDenomation()[3].toString()}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="flex justify-between">\n                <button id="clearBtn" class="bg-gradient-to-r from-lime-300 via-lime-400 to-lime-500 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-lime-300 dark:focus:ring-lime-800 shadow-lg shadow-lime-500/50 dark:shadow-lg dark:shadow-lime-800/80 font-bold rounded-lg w-32 py-2.5 mx-3 text-gray-500">\n                CLEAR\n                </button>\n                <button id="dealBtn" class="bg-gradient-to-r from-blue-400 via-blue-500 to-blue-600 hover:bg-gradient-to-br focus:ring-4      focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 font-bold rounded-lg w-32 py-2.5 mx-3 text-gray-600">DEAL\n                </button>\n            </div>\n            `;const a=i.querySelector("#userBetAmount"),o=[...i.querySelectorAll(".chip")],l=r.MAINFIELD.querySelector("#onBetChips"),d=r.MAINFIELD.querySelector("#ownChips");for(const t of o)t.addEventListener("click",(()=>{const n=parseInt((null==a?void 0:a.innerHTML)||"0",10),s=t.getAttribute("data-chips");if(null!==s){const t=n+parseInt(s,10);t<=e.getPlayers()[0].getChips()&&(a.innerHTML=t.toString())}}));null===(t=i.querySelector("#clearBtn"))||void 0===t||t.addEventListener("click",(()=>{null!==a&&(a.innerHTML="0")})),null===(n=i.querySelector("#dealBtn"))||void 0===n||n.addEventListener("click",(()=>{null!==a&&"0"!==a.innerHTML&&(s.Controller.actingPhase(e,i),l.innerHTML=a.innerHTML),d.innerHTML=(parseInt(d.innerHTML)-parseInt(a.innerHTML)).toString(),a.innerHTML="0"}))}}}},47:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CardView=void 0;const s=n(913);class r{static renderCard(e){const t=e.getSuit(),n=e.getRank(),s="H"===t||"D"===t?"text-red-600":"text-black",i=r.getSuitSymbol(t);return`\n    <div class="card h-36 w-28 relative mx-1 cursor-pointer">\n      <div class="back rounded shadow-xl absolute bg-gradient-to-br from-red-900 to-red-600 border-4 border-white flex justify-center items-center ${s}">\n        <div class="text-3xl text-white opacity-50">♦</div>\n      </div>\n      <div class="front rounded shadow-xl bg-white absolute flex justify-center items-center text-red-500">\n        <div class="w-4 text-center absolute top-0 left-1">\n          <div class="h-4 text-l">${n}</div>\n          <div class="h-4 mt-1">${i}</div>\n        </div>\n        <div class="text-2xl">${i}</div>\n        <div class="w-4 text-center absolute bottom-0 right-1 rotate-180">\n          <div class="h-4 text-l">${n}</div>\n          <div class="h-4 mt-1">${i}</div>\n        </div>\n      </div>\n    </div>\n    `}static rotateCards(e){const t=null===s.MAINFIELD||void 0===s.MAINFIELD?void 0:s.MAINFIELD.querySelector(`#${e}`);if(!t)return;const n=Array.from(t.querySelectorAll(".card"));if("houseCardDiv"===e){const e=n[0];e&&(this.addRotateClass(e,".front","rotate-front"),this.addRotateClass(e,".back","rotate-back"))}else n.forEach((e=>{this.addRotateClass(e,".front","rotate-front"),this.addRotateClass(e,".back","rotate-back")}))}static addRotateClass(e,t,n){const s=e.querySelector(t);s&&s.classList.add(n)}static getSuitSymbol(e){switch(e){case"H":return"♥";case"D":return"♦︎";case"C":return"♣";default:return"♠"}}}t.CardView=r},766:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MainView=void 0;const s=n(913);class r{static render(e){s.MAINFIELD&&(r.displayBlock(s.MAINFIELD),s.MAINFIELD.innerHTML=`\n        <div class="h-screen flex justify-center" style="background: #1D4434; color: white;">            \n          <div class="container pt-10">\n            <p class="text-center text-yellow-300 text-3xl">House</p>\n            <div class="flex justify-center py-2">\n              <button class="bg-white value-circle rounded-full cursor-default" disabled>\n                <p id="houseScore" class="text-black mb-1 font-bold text-xl">0</p>\n              </button>\n            </div>\n\n            <div id="houseCardDiv" class="flex justify-center py-3"></div>\n\n            <div id="playersDiv" class="flex justify-center pt-[3.2rem]">\n              <div id="userDiv" class="flex flex-col items-center">\n                <p class="text-center text-yellow-300 text-3xl">${e.getPlayers()[0].getName()}</p>\n                <div class="text-center text-white flex p-1 justify-between">\n                  <p class="rem1 px-2 text-left">BET: <span id="onBetChips" class="text-xl">${e.getPlayers()[0].getBet()}</span></p>\n                  <p class="rem1 px-2 text-left">CHIP: <span id="ownChips" class="text-xl">${e.getPlayers()[0].getChips()}</span></p>\n                </div>\n                <div class="flex justify-center py-2">\n                  <button class="bg-white value-circle rounded-full cursor-default" disabled>\n                    <p id="playerScore" class="text-black mb-1 font-bold text-xl">0</p>\n                  </button>\n                </div>\n                <div class="flex justify-center py-1">\n                  <button id="statusField" class="bg-gray-600 rounded-lg w-40 py-1 cursor-default" disabled>\n                    WAITING\n                  </button>\n                </div>\n\n                <div id="userCardDiv" class="flex justify-center pt-5"></div>\n                <div id="betOrActionDiv"></div>\n              </div>\n            </div>\n          </div>\n        </div>  \n      `)}static setPlayerStatus(e){(null===s.MAINFIELD||void 0===s.MAINFIELD?void 0:s.MAINFIELD.querySelector("#statusField")).innerHTML=e}static setScore(e){const t=null===s.MAINFIELD||void 0===s.MAINFIELD?void 0:s.MAINFIELD.querySelector("#houseScore"),n=null===s.MAINFIELD||void 0===s.MAINFIELD?void 0:s.MAINFIELD.querySelector("#playerScore");t.innerHTML=e.getHouse().getHand()[0].getRankNumber().toString(),n.innerHTML=e.getPlayers()[0].getHandScore().toString()}static displayNone(e){e.classList.remove("block"),e.classList.add("hidden")}static displayBlock(e){e.classList.remove("hidden"),e.classList.add("block")}}t.MainView=r},693:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StartView=void 0;const s=n(913),r=n(766),i=n(603),a=n(430);t.StartView=class{static render(){s.STARTPAGE&&(s.STARTPAGE.innerHTML='\n        <div class="background-container flex items-center justify-center">\n            <form class="startGameForm">\n                <div class="mb-4">\n                    <label class="block mb-2 font-bold text-white text-xl">NAME</label>\n                    <input class="w-full px-3 py-2 border rounded-xl focus:outline-green-600 shadow-xl"\n                        id="userName"\n                        type="text"\n                        value="TERADAD"\n                        placeholder="Name"\n                        required\n                    >\n                </div>\n                <div class="mb-9">\n                    <label class="block mb-2 font-bold text-white text-xl">GAME</label>\n                    <select class="w-full px-3 py-3 border rounded-xl focus:outline-green-600 shadow-xl" id="gameType">\n                        <option value="blackjack">BlackJack</option>\n                        <option value="porker" disabled>Porker - coming soon -</option>\n                    </select>\n                </div>\n                <button id="startBtn" class="w-full mt-3 px-4 py-3 font-bold text-white bg-green-600 rounded-xl hover:bg-green-500 shadow-xl transition-colors duration-300"\n                    type="submit">\n                    START GAME\n                </button>\n            </form>\n        </div>\n      '),null===s.STARTPAGE||void 0===s.STARTPAGE||s.STARTPAGE.querySelector(".startGameForm").addEventListener("submit",(e=>{e.preventDefault();const t=null===s.STARTPAGE||void 0===s.STARTPAGE?void 0:s.STARTPAGE.querySelector("#userName"),n=null===s.STARTPAGE||void 0===s.STARTPAGE?void 0:s.STARTPAGE.querySelector("#gameType");s.STARTPAGE&&r.MainView.displayNone(s.STARTPAGE),i.Controller.startBlackJack(new a.Player(t.value,"user",n.value))}))}}}},t={};(function n(s){var r=t[s];if(void 0!==r)return r.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,n),i.exports})(603).Controller.renderStartPage()})();